@model EnrollmentSystem.Models.Student
@{
    Layout = null;
    var enrollment = ViewBag.Enrollment;
    var sections = ViewBag.Sections;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>Student Enrollment</title>
    <link rel="stylesheet" href="@Url.Content("~/Content/edmark.css")">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5; 
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .content-section {
            padding: 30px;
            flex-grow: 1;
        }

        table th, table td {
            vertical-align: middle !important;
        }
    </style>
</head>
<body>

@Html.Partial("_MainHeader")

<div class="container content-section">
    <h1 class="mb-4">Student Enrollment</h1>
    <p class="lead">Select subjects based on your status below.</p>

    <div class="card mt-4 shadow-sm">
        <div class="card-body">

           
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Student ID</label>
                        @Html.TextBoxFor(model => model.Stud_Code, new { @class = "form-control", @readonly = "readonly" })
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Program</label>
                        @Html.TextBoxFor(model => model.ProgCode, new { @class = "form-control", @readonly = "readonly" })
                    </div>
                </div>

                <div class="row mb-4">
                    <div class="col-md-3">
                        <label class="form-label">Academic Year</label>
                        <input id="ay_code" value="@enrollment.ay_code" class="form-control" readonly />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Semester</label>
                        <input id="sem_id" value="@enrollment.sem_id" class="form-control" readonly />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Student Status</label>
                        <select class="form-select form-control" name="studentStatus">
                            <option disabled @(Model.Stud_Status == null ? "selected" : "")>Choose...</option>
                            <option value="Regular" @(Model.Stud_Status == "Regular" ? "selected" : "")>Regular</option>
                            <option value="Irregular" @(Model.Stud_Status == "Irregular" ? "selected" : "")>Irregular</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Section</label>
                        <select class="form-select form-control" id="section" name="section">
                            <option selected disabled>Choose...</option>
                            @foreach (var sec in sections)
                            {
                                <option value="@sec.BlkSecId">@sec.BlkSecCode</option>
                            }
                        </select>
                    </div>
                </div>

                <hr class="my-4" />

                <!-- Schedule Table -->
                <h5>Schedule</h5>
                <div class="table-responsive mb-3">
                    <table class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th>MIS CODE</th>
                                <th>COURSE NAME</th>
                                <th>DAYS</th>
                                <th>TIME</th>
                                <th>ROOM</th>
                                <th>PROFESSOR</th>
                                <th>UNITS</th>
                                <th>ACTION</th>
                            </tr>
                        </thead>
                        <tbody id="scheduleTableBody"></tbody>
                    </table>
                </div>

                <!-- Selected Subjects Table -->
                <h6 class="mb-2">Selected Subjects</h6>
                <div class="table-responsive mb-3">
                    <table class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th>MIS CODE</th>
                                <th>COURSE CODE</th>
                                <th>TITLE</th>
                                <th>DAYS</th>
                                <th>TIME</th>
                                <th>UNITS</th>
                                <th>ACTION</th>
                            </tr>
                        </thead>
                        <tbody id="selectedSubjectsTableBody"></tbody>
                    </table>
                </div>

                <p class="card-text mt-3"><strong>Total Units:</strong> <span id="totalUnitsDisplay">0</span></p>
                <input type="hidden" name="selectedCourseCodes" id="selectedCourseCodesInput" />
                <button id="btn" type="submit" class="btn btn-primary mt-4">CONFIRM ENROLLMENT</button>
            
        </div>
    </div>
</div>

<!-- Scripts -->
<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script> 
<script src="@Url.Content("~/Scripts/bootstrap.bundle.min.js")"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> 

<script>
    let numberOfSchedules = 0;
    const scheduleTableBody = $('#scheduleTableBody');
    const selectedSubjectsTableBody = $('#selectedSubjectsTableBody');
    const totalUnitsDisplay = $('#totalUnitsDisplay');
    const selectedCourseCodesInput = $('#selectedCourseCodesInput');
    let selectedCourses = [];
    $('#btn').click(function (e) {
        e.preventDefault(); // Prevent default form submission

        const studentId = parseInt($('#Stud_Code').val());
        const ayCode = $('#scheduleTableBody').find('td:eq(0)').data('ay_code') || "2024-2025";
        const semId = $('#scheduleTableBody').find('td:eq(1)').data('sem_id') || 2;

        if (!studentId) {
            Swal.fire("Error", "Student ID is required.", "error");
            return;
        }

        if (selectedCourses.length === 0) {
            Swal.fire("No Subjects Selected", "Please select at least one subject.", "warning");
            return;
        }
        var value = $('select[name="studentStatus"]').val();
        if (value === 'Regular') {
            const requiredMisCodes = $('#scheduleTableBody tr').map(function () {
                return $(this).data('id');
            }).get();
            const selectedMisCodes = selectedCourses.map(c => c.misCode);
            const missing = requiredMisCodes.filter(code => !selectedMisCodes.includes(code));
            if (missing.length > 0) {
                Swal.fire("Incomplete Enrollment", "You must enroll in all subjects listed for your block section.", "warning");
                return;
            }
        }
        // Confirm with user before submitting
        Swal.fire({
            title: 'Confirm Enrollment',
            text: `You are about to enroll in ${selectedCourses.length} subject(s).`,
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: 'Submit'
        }).then((result) => {
            if (result.isConfirmed) {
                const enrollmentData = selectedCourses.map(course => {
                    const section = course.section || "BSIT-1A"; // fallback if not available
                    const yearMatch = section.match(/-(\d+)([A-Z])/);

                    let enrollYrLevel = "Unknown";

                    if (yearMatch && yearMatch[1]) {
                        const yearDigit = yearMatch[1];
                        switch (yearDigit) {
                            case "1": enrollYrLevel = "1st Year"; break;
                            case "2": enrollYrLevel = "2nd Year"; break;
                            case "3": enrollYrLevel = "3rd Year"; break;
                            case "4": enrollYrLevel = "4th Year"; break;
                            default: enrollYrLevel = `${yearDigit}th Year`;
                        }
                    }

                    return {
                        mis_code: course.misCode,
                        crs_code: course.code,
                        ay_code: "@enrollment.ay_code", // From ViewBag
                        enrol_sem: @enrollment.sem_id,  // From ViewBag
                        stud_code: studentId,
                        enrol_status: "Pending",
                        enrol_yr_level: enrollYrLevel,
                        enrol_date: new Date().toISOString().split('T')[0] // Today's date
                    };
                });

                // Send data to backend
                $.post("/Main/SaveEnrollments", { enrollments: enrollmentData }, function (response) {
                    if (response.success) {
                        Swal.fire("Success", "Subjects enrolled successfully!", "success")
                            .then(() => window.location.href = '/Main/Home');
                    } else {
                        Swal.fire("Warning", response.message || "Failed to save enrollment.", "Warning");
                    }
                }).fail(function () {
                    Swal.fire("Error", "Server error. Please try again.", "error");
                });
            }
        });
    });
    function formatTime(timeStr) {
        if (!timeStr || typeof timeStr !== 'string') return '--:--';
        let [hours, mins] = timeStr.split(":").slice(0, 2).map(Number);
        const period = hours >= 12 ? "PM" : "AM";
        hours = hours % 12 || 12;
        return `${hours}:${mins.toString().padStart(2, '0')} ${period}`;
    }

    function formatDayTime(details) {
        const timeGroups = {};
        details.forEach(detail => {
            const key = `${detail.startTime}-${detail.endTime}`;
            if (!timeGroups[key]) timeGroups[key] = [];
            timeGroups[key].push(detail.day.charAt(0).toUpperCase() + detail.day.slice(1));
        });

        return Object.entries(timeGroups).map(([key, days]) => {
            const [start, end] = key.split("-");
            return `${days.join("/")}: ${formatTime(start)} - ${formatTime(end)}`;
        }).join(" / ");
    }

    function groupSchedules(schedules) {
        const grouped = {};

        schedules.forEach(schedule => {
            const misCode = schedule.MisCode;
            const courseCode = schedule.Course;
            const courseName = schedule.CourseName || schedule.Course;
            const day = schedule.Day?.toLowerCase();
            const start = schedule.StartTime;
            const end = schedule.EndTime;

            if (!misCode || !courseCode || !day || !start || !end) return;

            if (!grouped[misCode]) {
                grouped[misCode] = {
                    misCode,
                    code: courseCode,
                    title: courseName,
                    room: schedule.Room || "--",
                    professor: schedule.Professor || "--",
                    section: schedule.Section || "--",
                    units: schedule.Units || 3,
                    scheduleDetails: []
                };
            }

            grouped[misCode].scheduleDetails.push({
                day,
                startTime: start,
                endTime: end
            });
        });

        return Object.values(grouped);
    }

    function displaySchedule(schedules) {
        scheduleTableBody.empty();

        const grouped = groupSchedules(schedules);

        grouped.forEach(schedule => {
            const dayTimeFormatted = formatDayTime(schedule.scheduleDetails);
            const days = [...new Set(schedule.scheduleDetails.map(d => d.day))]
                         .map(d => d.charAt(0).toUpperCase() + d.slice(1))
                         .join(", ");

            const row = `
                <tr data-id="${schedule.misCode}">
                    <td>${schedule.misCode}</td>
                    <td 
                        data-crs="${schedule.code}"
                        data-days='${JSON.stringify(schedule.scheduleDetails.map(d => d.day))}'
                        data-starts='${JSON.stringify(schedule.scheduleDetails.map(d => d.startTime))}'
                        data-ends='${JSON.stringify(schedule.scheduleDetails.map(d => d.endTime))}'
                    >
                        ${schedule.title} (${schedule.code})
                    </td>
                    <td>${days}</td>
                    <td>${dayTimeFormatted}</td>
                    <td>${schedule.room}</td>
                    <td>${schedule.professor}</td>
                    <td>${schedule.units}</td>
                    <td><button type="button" class="btn btn-sm btn-success add-subject">Add</button></td>
                </tr>`;
            scheduleTableBody.append(row);
        });
    }
    function safeParse(jsonString) {
        if (!jsonString || typeof jsonString !== 'string') return [];

        try {
            const parsed = JSON.parse(jsonString);
            return Array.isArray(parsed) ? parsed : [parsed];
        } catch {
            // If not valid JSON, split by comma or just return as single value
            return jsonString.split(',').map(s => s.trim()).filter(Boolean);
        }
    }
    function updateSelectedSubjectsTable() {
        selectedSubjectsTableBody.empty();
        let totalUnits = 0;

        selectedCourses.forEach(course => {
            totalUnits += course.units;

            const tr = `
            <tr data-id="${course.misCode}">
                <td>${course.misCode}</td>
                <td>${course.code}</td>
                <td>${course.title}</td>
                <td>${course.days}</td>
                <td>${course.time}</td>
                <td>${course.units}</td>
                <td><button type="button" class="btn btn-sm btn-danger remove-subject">Remove</button></td>
            </tr>`;
            selectedSubjectsTableBody.append(tr);
        });

        totalUnitsDisplay.text(totalUnits);
        selectedCourseCodesInput.val(selectedCourses.map(c => c.misCode).join(','));
    }

    // Add subject handler
    $(document).on('click', '.add-subject', function () {
        const row = $(this).closest('tr');
        const misCode = row.data('id');
        const cells = row.find('td');

        // Copy values directly from row
        const courseCode = $(cells[1]).data('crs') || $(cells[1]).text().split('(')[1]?.replace(/[^\w]/g, '') || 'N/A';
        const title = $(cells[1]).text();
        const days = $(cells[2]).text().trim();  // e.g., "Monday"
        const time = $(cells[3]).text().trim(); // e.g., "Monday 10:00 AM - 12:00 PM"

        const room = $(cells[4]).text().trim();
        const professor = $(cells[5]).text().trim();
        const units = parseInt($(cells[6]).text()) || 3;

        if (!misCode || !courseCode || !days || !time) {
            Swal.fire("Invalid Data", "This schedule is missing required information.", "warning");
            return;
        }

        // Check for time/day overlap before adding
        const newTimeSlots = extractTimeSlotsFromText(time); // Converts "Monday 10:00 AM - 12:00 PM" into time slots
        const hasConflict = findTimeConflicts(selectedCourses, newTimeSlots);

        if (hasConflict) {
            Swal.fire("Conflict Detected", "This schedule overlaps with another selected subject.", "error");
            return;
        }

        // Prevent duplicate course code
        if (selectedCourses.some(c => c.code === courseCode)) {
            Swal.fire("Already Added", `"${courseCode}" already added. One per course only.`, "info");
            return;
        }

        // Push new subject as-is
        selectedCourses.push({
            misCode,
            code: courseCode,
            title,
            days,
            time,
            room,
            professor,
            units
        });

        updateSelectedSubjectsTable();
    });
    function extractTimeSlotsFromText(timeStr) {
        const pattern = /(\w+)\s+(\d{1,2}:\d{2}\s+[APM]{2})\s*-\s*(\d{1,2}:\d{2}\s+[APM]{2})/gi;
        const matches = timeStr.matchAll(pattern);
        const result = [];

        for (const match of matches) {
            const day = match[1].toLowerCase();
            const start = parseTime(match[2]);
            const end = parseTime(match[3]);
            result.push({ day, start, end });
        }

        return result;
    }
    

    $(document).on('click', '.remove-subject', function () {
        const row = $(this).closest('tr');
        const misCode = row.find('td:first-child').text().trim(); // MIS CODE is first cell
        selectedCourses = selectedCourses.filter(c => c.misCode !== misCode);
        row.remove();
        updateSelectedSubjectsTable();
    });

    // Student status change — clear selection when switching mode
    $('.form-select[name="studentStatus"]').on('change', function () {
        const status = $(this).val();
        const sectionId = $('#section').val();

        selectedCourses = [];

        if (status === 'Regular' && sectionId) {
            $.get(`/fetch/GetSchedulesBySection?sectionId=${sectionId}`, function (response) {
                displaySchedule(response.schedules || []);
                numberOfSchedules = response.schedules.length;
                updateSelectedSubjectsTable();
            }).fail(() => {
                Swal.fire("Error", "Failed to load regular schedule.", "error");
            });
        } else if (status === 'Irregular') {
            $.get("/fetch/GetAllSecondSemesterSchedules", function (response) {
                displaySchedule(response.schedules || []);
                updateSelectedSubjectsTable();
            }).fail(() => {
                Swal.fire("Error", "Failed to load irregular schedule.", "error");
            });
        } else {
            scheduleTableBody.empty();
            selectedCourses = [];
            updateSelectedSubjectsTable();
        }
    });

    // Section change for Regular students
    $('#section').on('change', function () {
        const status = $('.form-select[name="studentStatus"]').val();
        const sectionId = $(this).val();

        if (status === 'Regular' && sectionId) {
            $.get(`/fetch/GetSchedulesBySection?sectionId=${sectionId}`, function (response) {
                displaySchedule(response.schedules || []);
                updateSelectedSubjectsTable();
            }).fail(() => {
                Swal.fire("Error", "Failed to fetch schedule for this section", "error");
            });
        }
    });

    // Parse time string into minutes since midnight
    function parseTime(timeStr) {
        const timeMatch = timeStr.match(/(\d{1,2}):(\d{2})\s+(AM|PM)/i);
        if (!timeMatch) return 0;

        let hours = parseInt(timeMatch[1]);
        const mins = parseInt(timeMatch[2]);
        const period = timeMatch[3];

        if (period === "PM" && hours < 12) hours += 12;
        if (period === "AM" && hours === 12) hours = 0;

        return hours * 60 + mins;
    }

    // Detect overlapping schedules
    function findTimeConflicts(currentList, newTimeSlots) {
        if (currentList.length === 0 || newTimeSlots.length === 0) return false;

        for (let i = 0; i < newTimeSlots.length; i++) {
            const newSlot = newTimeSlots[i];
            for (let j = 0; j < currentList.length; j++) {
                const existingSlots = extractTimeSlotsFromText(currentList[j].time);
                for (let k = 0; k < existingSlots.length; k++) {
                    const a = newSlot;
                    const b = existingSlots[k];

                    if (a.day === b.day && a.start < b.end && b.start < a.end) {
                        return true;
                    }
                }
            }
        }

        return false;
    }

    // Load schedule when student status or section changes
    $(document).ready(function () {
        if(@enrollment.is_open.ToString().ToLower() === false){
            Swal.fire({
                title: `Enrollment for '@enrollment.ay_code' is closed!`,
                icon: 'warning',
                confirmButtonText: 'OK'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/Main/Home';
                }
            });
            return;
        }
        var data = {
            ay_code: '@enrollment.ay_code',         // Use quotes to pass Razor values safely
            sem: '@enrollment.sem_id',
            studentId: parseInt($("#Stud_Code").val())
        };

        $.ajax({
            url: '/Main/isEnrollment',
            method: 'POST',
            contentType: 'application/json',
            data : JSON.stringify(data),
            success: function (res){
                if(res.submitted){
                    Swal.fire({
                        title: 'You already submitted your enrollment',
                        icon: 'warning',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = '/Main/Home'; 
                        }
                    });                
                }
            }
        });
        const studentStatusDropdown = $('.form-select[name="studentStatus"]');
        const sectionDropdown = $('#section');

        studentStatusDropdown.on('change', function () {
            const status = $(this).val();
            const sectionId = sectionDropdown.val();

            selectedCourses = [];

            if (status === 'Regular' && sectionId) {
                $.get(`/fetch/GetSchedulesBySection?sectionId=${sectionId}`, function (response) {
                    displaySchedule(response.schedules || []);
                    updateSelectedSubjectsTable();
                });
            } else if (status === 'Irregular') {
                $.get("/fetch/GetAllSecondSemesterSchedules", function (response) {
                    displaySchedule(response.schedules || []);
                    updateSelectedSubjectsTable();
                });
            } else {
                scheduleTableBody.empty();
                selectedCourses = [];
                updateSelectedSubjectsTable();
            }
        });
        
        sectionDropdown.on('change', function () {
            const status = studentStatusDropdown.val();
            const sectionId = $(this).val();

            if (status === 'Regular' && sectionId) {
                $.get(`/fetch/GetSchedulesBySection?sectionId=${sectionId}`, function (response) {
                    displaySchedule(response.schedules || []);
                    updateSelectedSubjectsTable();
                });
            }
        });
    });
</script>
</body>
</html>